1. What is the Big O for this?
    1) Constant Time O(1), iterate only 1 time because you are waiting for an immediate response from the crowd

    2) Linear time O(n), it will take as long as the number of people you have to ask before finding the match.


////////////////////////////////////////////////////////////////////////////////
2. Even or odd
    What is the Big O of the following algorithm? Explain your answer

        function isEven(value) {
            if (value % 2 === 0) {
                return true;
            }
            else
                return false;
            }
        }

**** Constant Time O(1), only requires evaluation of input to be true or false to complete the function's job


////////////////////////////////////////////////////////////////////////////////
3. Are you here?
    What is the Big O of the following algorithm? Explain your answer

        function areYouHere(arr1, arr2) {
            for (let i = 0; i < arr1.length; i++) {
                const el1 = arr1[i];
                for (let j = 0; j < arr2.length; j++) {
                    const el2 = arr2[j];
                    if (el1 === el2) return true;
                }
            }
            return false;
        }

**** Polynomial Time O(n^k), because of nested for-loop, the runtime is exponentially longer per the inputs


////////////////////////////////////////////////////////////////////////////////
4. Doubler
    What is the Big O of the following algorithm? Explain your answer

        function doubleArrayValues(array) {
            for (let i = 0; i < array.length; i++) {
                array[i] *= 2;
            }
            return array;
        }
    
**** Linear Time O(n), runtime only depends on the length of a single input(array) to perform the function


////////////////////////////////////////////////////////////////////////////////
5. Naive search
    What is the Big O of the following algorithm? Explain your answer

        function naiveSearch(array, item) {
            for (let i = 0; i < array.length; i++) {
                if (array[i] === item) {
                    return i;
                }
            }
        }

**** Constant Time O(1), 


////////////////////////////////////////////////////////////////////////////////
6. Creating pairs:
    What is the Big O of the following algorithm? Explain your answer

        function createPairs(arr) {
            for (let i = 0; i < arr.length; i++) {
                for(let j = i + 1; j < arr.length; j++) {
                    console.log(arr[i] + ", " +  arr[j] );
                }
            }
        }

**** Polynomial Time O(n^k), nested for-loop


////////////////////////////////////////////////////////////////////////////////
7. Compute the sequence
    What does the following algorithm do? 
    What is its runtime complexity? 
    Explain your answer

        function compute(num) {
            let result = [];
            for (let i = 1; i <= num; i++) {

                if (i === 1) {
                    result.push(0);
                }
                else if (i === 2) {
                    result.push(1);
                }
                else {
                    result.push(result[i - 2] + result[i - 3]);
                }
            }
            return result;
        }

****Linear Time O(n), performs the 'fibonnacci sequence'


////////////////////////////////////////////////////////////////////////////////
8. An efficient search    
    What is the Big O of the following algorithm? 
    Explain your answer

        function efficientSearch(array, item) {
        let minIndex = 0;
        let maxIndex = array.length - 1;
        let currentIndex;
        let currentElement;
        //let ticks = 0;

        while (minIndex <= maxIndex) {
            currentIndex = Math.floor((minIndex + maxIndex) / 2);
            currentElement = array[currentIndex];
            //ticks++;

            if (currentElement < item) {
            minIndex = currentIndex + 1;
            //ticks++;
            }
            else if (currentElement > item) {
            maxIndex = currentIndex - 1;
            //ticks++;
            }
            else {
            return {
                currentIndex: currentIndex,
                //ticks: ticks
            };
            }
        }
        return -1;
        }

**** Logarithmic Time O(log n), the search elements get smaller after each  
     iteration


////////////////////////////////////////////////////////////////////////////////
9. Random element
    What is the Big O of the following algorithm? Explain your answer

        function findRandomElement(arr) {
        return arr[Math.floor(Math.random() * arr.length)];
        }

**** Constant Time O(1), simply finds & returns a random number from the array, 
     input size is irrelevant to run time


////////////////////////////////////////////////////////////////////////////////
10. What Am I?
    What does the following algorithm do? 
    What is the Big O of the following algorithm? 
    Explain your answer

        function isWhat(n) {
            if (n < 2 || n % 1 !== 0) {
                return false;
            }
            for (let i = 2; i < n; ++i) {
                if (n % i === 0) return false;
            }
            return true;
        }

**** Linear Time O(n), determines if n is a 'prime number', time to process depends upon input size because of for-loop


////////////////////////////////////////////////////////////////////////////////
11. Tower of Hanoi
    The Tower of Hanoi is a very famous mathematical puzzle (some call it game!). 

    This is how it goes:

    There are three rods and a number of disks of different sizes 
    which can slide onto any rod. The puzzle starts with the disks 
    neatly stacked in ascending order of size on one rod, the smallest 
    disk at the top (making a conical shape). The other two rods are empty 
    to begin with.
    The goal of the puzzle is to move the entire stack of rods to another rod 
    (can't be the original rod where it was stacked before) where it will be stacked
    in the ascending order as well. This should be done obeying the following rules:
    
     i) Only one disk may be moved at a time 
     ii) Each move consists of taking the upper disk from one of the rods 
         and sliding it onto another rod, on top of the other disks that may 
         already be present on that rod. 
     iii) A larger disk may not placed on top of a smaller disk
        
        Input:

        Rod A	        Rod B	        Rod C
        ----		
        ---------		
        -------------	

        Output:

        Rod A	        Rod B	        Rod C
                                        ----
                                        ---------
                                        -------------

    Derive an algorithm to solve the Tower of Hanoi puzzle.

    Implement your algorithm using recursion. 
    Your program should display each movement of the disk from one rod to another.
    If you are given 5 disks, how do the rods look like after 7 recursive calls?
    How many moves are needed to complete the puzzle with 3 disks? 
    with 4 disks? 
    with 5 disks?
    What is the runtime of your algorithm?

******************************************************************
        let count = 1;
        function towerOfHanoi(disks, from, via, to) {
        //base
        if (disks === 0) return;

        //recursive-->subtract a disk-->switch locations to reflect move
        towerOfHanoi(disks-1, from, to, via);

        //prints current move
        console.log(`${count} move: disk from ${from} to ${to}`);

        //counts move
        count++;
        
        //recursive-->subtract a disk-->switch locations to reflect move
        towerOfHanoi(disks-1, via, from, to);
        }

        towerOfHanoi(3, 'A', 'B', 'C');

        1 move: disk from A to C
        2 move: disk from A to B
        3 move: disk from C to B
        4 move: disk from A to C
        5 move: disk from B to A
        6 move: disk from B to C
        7 move: disk from A to C


bigO is exponential time, increases as input size grows
******************************************************************


////////////////////////////////////////////////////////////////////////////////
//////////////// STILL NEED TO TRY THESE OUT ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
12. Iterative version
Solve the drills 1 - 7 from your previous checkpoint (Recursion) iteratively.

13. Recursive Big O
Take your solutions from the recursive exercises that you completed in the previous checkpoint and identify the time complexities (big O) of each of them.

14. Iterative Big O
Take your solutions from the iterative exercises today and identify the time complexities (big O) of each of them.